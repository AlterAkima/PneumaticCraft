// Date: 21-10-2013 22:46:00
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package pneumaticCraft.common.thirdparty.buildcraft;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.MathHelper;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.common.util.ForgeDirection;

import org.lwjgl.opengl.GL11;

import pneumaticCraft.client.model.IBaseModel;
import pneumaticCraft.common.util.PneumaticCraftUtils;
import pneumaticCraft.lib.Textures;
import cpw.mods.fml.client.FMLClientHandler;

public class ModelPneumaticEngine extends ModelBase implements IBaseModel{
    //fields
    ModelRenderer Base;
    ModelRenderer Cilinder;
    ModelRenderer Axil;

    public ModelPneumaticEngine(){
        textureWidth = 64;
        textureHeight = 64;

        Base = new ModelRenderer(this, 0, 0);
        Base.addBox(0F, 0F, 0F, 16, 16, 4);
        Base.setRotationPoint(-8F, 8F, 4F);
        Base.setTextureSize(64, 64);
        Base.mirror = true;
        setRotation(Base, 0F, 0F, 0F);
        Cilinder = new ModelRenderer(this, 0, 22);
        Cilinder.addBox(0F, 0F, 0F, 16, 16, 4);
        Cilinder.setRotationPoint(-8F, 8F, 0F);
        Cilinder.setTextureSize(64, 64);
        Cilinder.mirror = true;
        setRotation(Cilinder, 0F, 0F, 0F);
        Axil = new ModelRenderer(this, 0, 44);
        Axil.addBox(0F, 0F, 0F, 8, 8, 12);
        Axil.setRotationPoint(-4F, 12F, -8F);
        Axil.setTextureSize(64, 64);
        Axil.mirror = true;
        setRotation(Axil, 0F, 0F, 0F);
    }

    @Override
    public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5){
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5, entity);
        Base.render(f5);
        Cilinder.render(f5);
        Axil.render(f5);
    }

    private void setRotation(ModelRenderer model, float x, float y, float z){
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    @Override
    public void renderStatic(float size, TileEntity tile){

    }

    @Override
    public ResourceLocation getModelTexture(TileEntity tile){
        return Textures.MODEL_PNEUMATIC_ENGINE_BLUE;
    }

    @Override
    public boolean rotateModelBasedOnBlockMeta(){
        return true;
    }

    @Override
    public void renderDynamic(float size, TileEntity tile, float partialTicks){
        float cilinderProgress = 0;
        if(tile instanceof TileEntityPneumaticEngine) {
            TileEntityPneumaticEngine tePe = (TileEntityPneumaticEngine)tile;
            float progressCount = tePe.oldCilinderProgress + (tePe.cilinderProgress - tePe.oldCilinderProgress) * partialTicks;
            if(progressCount < 0) progressCount += PneumaticCraftUtils.sin.length;
            progressCount = MathHelper.clamp_float(progressCount, 0, 499);
            cilinderProgress = (float)PneumaticCraftUtils.sin[(int)progressCount] / 2 + 0.5F;
            switch(tePe.getEnergyStage()){
                case GREEN:
                    FMLClientHandler.instance().getClient().getTextureManager().bindTexture(Textures.MODEL_PNEUMATIC_ENGINE_GREEN);
                    break;
                case YELLOW:
                    FMLClientHandler.instance().getClient().getTextureManager().bindTexture(Textures.MODEL_PNEUMATIC_ENGINE_YELLOW);
                    break;
                case RED:
                case OVERHEAT:
                    FMLClientHandler.instance().getClient().getTextureManager().bindTexture(Textures.MODEL_PNEUMATIC_ENGINE_RED);
                    break;
            }
        } else {
            PneumaticCraftUtils.rotateMatrixByMetadata(ForgeDirection.DOWN.ordinal());
            cilinderProgress = 0.5F;
        }
        Base.render(size);
        Axil.render(size);
        GL11.glTranslated(0, 0, -cilinderProgress * (8 / 16F - 0.01F));//0.01 to prevent z-fighting.
        Cilinder.render(size);
    }

}
